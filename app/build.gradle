apply plugin: 'com.android.model.application'

def libWalletPath() {
    return "../libwallet"
}
def moneroPath = "${libWalletPath()}/monero"
def moneroHeaderPaths = [ "${moneroPath}/src", "${moneroPath}/contrib/epee/include", "${moneroPath}/external", ]

final APP_ABIS = ["armeabi-v7a"]
final BOOST_SHARED_LIBS = ["boost_serialization", "boost_program_options", "boost_random", "boost_regex", "boost_filesystem", "boost_system", "boost_thread"]


model {
    android {
        compileSdkVersion 23
        buildToolsVersion "25.0.2"
        ndk {
            moduleName "libwallet-android"

            for (path in moneroHeaderPaths) {
                cppFlags.add("-I${file(path)}".toString())
            }
            cppFlags.add("-I" + getBoostIncDir())


            println "Monero:  ${file(moneroPath)}"
            println "Monero lib exists ${file("${moneroPath}/src/lib/libwallet.a").exists()} "
            println "-l${file("${moneroPath}/src/lib/libwallet.a")}"
            ldLibs.add("${file("${moneroPath}/src/lib/libwallet.a")}".toString())

            stl "gnustl_shared"

            abiFilters.add(APP_ABIS[0])
            getPrebuiltLibPaths(APP_ABIS[0]).each { path ->
                println "Path ${path} ${file(path).exists()} "
                ldFlags.add("-L" + path)
            }
            ldLibs.addAll BOOST_SHARED_LIBS
        }

        defaultConfig {
            applicationId "me.ugo.monujo"
            minSdkVersion.apiLevel 19
            targetSdkVersion.apiLevel 23
            versionCode 1
            versionName "1.0"

            buildConfigFields {
                create() {
                    type "int"
                    name "VALUE"
                    value "1"
                }
            }
        }

        buildTypes {
            release {
                minifyEnabled false
                proguardFiles.add(file('proguard-rules.pro'))
            }
        }

//        productFlavors {
//            create("flavor1") {
//                applicationId "me.ugo"
//            }
//        }

        // Configures source set directory.
//        sources {
//            main {
//                java {
//                    source {
//                        srcDir "src"
//                    }
//                }
//            }
//        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'junit:junit:4.12'
    compile 'com.android.support:appcompat-v7:23.4.0'
    compile 'com.android.support:design:23.4.0'
}


tasks.all {
    task ->
        if (task.name.startsWith('link')) {
            task.dependsOn copyNativeLibs//, stripNativeLibs
        }
}

task copyNativeLibs {
    ["debug", "release"].each { buildType ->
        APP_ABIS.each { abi ->
            def libs = [:]
            BOOST_SHARED_LIBS.each { name ->
                libs[name] = "${getBoostLibDir(abi)}/lib${name}.so"
            }
            libs.crystax = getLibCrystax(abi)

            libs.each { name, file ->
                dependsOn tasks.create(name: "copy-native-library-${name}-${abi}-${buildType}", type: Copy) {
                    from file
                    into getTargetLibDir(abi, buildType)
                }
            }
        }
    }
}

task stripNativeLibs(dependsOn: copyNativeLibs) {
    ["debug", "release"].each { buildType ->
        APP_ABIS.each { abi ->
            def libs = []
            libs.addAll(BOOST_SHARED_LIBS)
            //libs += "crystax"

            libs.each { name ->
                dependsOn tasks.create(name: "strip-native-library-${name}-${abi}-${buildType}", type: Exec) {
                    commandLine getStripExecutable(abi), "--strip-unneeded", "${getTargetLibDir(abi, buildType)}/lib${name}.so"
                }
            }

        }
    }
}


def getCrystaxNdkDir() {
    return "${libWalletPath()}/crystax-ndk-10.3.2"
}

def getFlavorName(abi) {
    switch (abi) {
        case "armeabi":
            return "arm";
        case "armeabi-v7a":
            return "arm7"
        case "arm64-v8a":
            return "arm64"
        default:
            return abi.replaceAll('-', '_')
    }
}

def getToolchainName(abi) {
    switch (abi) {
        case ~/^armeabi.*/:
            return "arm-linux-androideabi"
        case ~/^arm64.*/:
            return "aarch64-linux-android"
        case "mips":
            return "mipsel-linux-android"
        case "mips64":
            return "mips64el-linux-android"
        case ["x86", "x86_64"]:
            return abi
        default:
            throw new GradleException("Unsupported ABI: '${abi}'")
    }
}

def getToolchainPrefix(abi) {
    switch (abi) {
        case ~/^armeabi.*/:
            return "arm-linux-androideabi"
        case ~/^arm64.*/:
            return "aarch64-linux-android"
        case "mips":
            return "mipsel-linux-android"
        case "mips64":
            return "mips64el-linux-android"
        case "x86":
            return "i686-linux-android"
        case "x86_64":
            return "x86_64-linux-android"
        default:
            throw new GradleException("Unsupported ABI: '${abi}'")
    }
}

import org.apache.tools.ant.taskdefs.condition.Os

def getHostOS() {
    if (Os.isFamily(Os.FAMILY_MAC))
        return "darwin"
    if (Os.isFamily(Os.FAMILY_UNIX))
        return "linux"
    if (Os.isFamily(Os.FAMILY_WINDOWS))
        return "windows"
    throw new GradleException("Unsupported host OS")
}

def getHostArch() {
    def arch = System.getProperty("os.arch")
    switch (arch) {
        case ["x86_64", "amd64"]:
            return "x86_64"
        case ~/^i[3456]86/:
        case "x86":
            return "x86"
        default:
            throw new GradleException("Can't detect host's CPU architecture: '${arch}'")
    }
}

def getHostTag() {
    def tag = getHostOS()
    def arch = getHostArch()
    if (tag != "windows" || arch != "x86")
        tag += "-${arch}"
    return tag
}

def getStripExecutable(abi) {
    def ndk = getCrystaxNdkDir()
    def toolchainName = getToolchainName(abi)
    def toolchainPrefix = getToolchainPrefix(abi)
    def hostTag = getHostTag()
    def strip = "${ndk}/toolchains/${toolchainName}-4.9/prebuilt/${hostTag}/bin/${toolchainPrefix}-strip"
    if (Os.isFamily(Os.FAMILY_WINDOWS))
        strip = strip.replaceAll('/', '\\\\') + '.exe'
    return strip
}

def getPrebuiltLibPaths(abi) {
    def paths = []
    paths += getBoostLibDir(abi)
    paths += getLibCrystaxDir(abi)
    return paths
}

def getTargetLibDir(abi, buildType) {
    return "${buildDir}/intermediates/binaries/${buildType}/${getFlavorName(abi)}/lib/${abi}"
}

def getLibCrystaxDir(abi) {
    return "${getCrystaxNdkDir()}/sources/crystax/libs/${abi}"
}

def getLibCrystax(abi) {
    return "${getLibCrystaxDir(abi)}/libcrystax.so"
}

def getBoostDir() {
    return "${getCrystaxNdkDir()}/sources/boost/1.59.0"
}

def getBoostIncDir() {
    return "${getBoostDir()}/include"
}

def getBoostLibDir(abi) {
    return "${getBoostDir()}/libs/${abi}/llvm-3.7"
}